 

    if ($inner -ne '') { "param($inner, [switch]`$StopOnFail)" } else { 'param([switch]$StopOnFail)' }
  

$ErrorActionPreference = "Stop"
$ProgressPreference = "SilentlyContinue"
$VerbosePreference = "Continue"

Write-Host "== agent.ps1 starting ==" -ForegroundColor Cyan
Write-Host ("PWD: " + (Get-Location)) -ForegroundColor Gray

# Resolve paths
$ProjectDir = (Get-Location).Path
$SprintPath = Join-Path $ProjectDir $SprintFile
$BacklogPath = if (($Backlog -and (($Backlog -and (Test-Path $Backlog))))) { Join-Path $ProjectDir $Backlog } else { $null }
$ConfigPath = Join-Path $ProjectDir $Config

Write-Host ("SprintFile: " + $SprintPath) -ForegroundColor Gray
Write-Host ("Backlog:    " + $BacklogPath) -ForegroundColor Gray
Write-Host ("Config:     " + $ConfigPath) -ForegroundColor Gray

if (!(Test-Path $SprintPath)) { throw "Sprint file not found: $SprintPath" }
if (!(Test-Path $ConfigPath)) { throw "Config file not found:  $ConfigPath" }

# Ensure Node + deps
if (-not (Get-Command node -ErrorAction SilentlyContinue)) { throw "Node.js 18+ is required. Install from https://nodejs.org (node not found)" }
Write-Host ("Node version: " + (node -v)) -ForegroundColor Gray

if (-not (Test-Path (Join-Path $PSScriptRoot "package.json"))) {
  Write-Host "No package.json here; initializing minimal deps..." -ForegroundColor Yellow
  Push-Location $PSScriptRoot
  npm init -y | Out-Null
  npm pkg set type="module" | Out-Null
  npm i yaml@2.5.1 | Out-Null
  Pop-Location
}

# Ensure Node + deps (self-heal)
if (-not (Get-Command node -ErrorAction SilentlyContinue)) {
  throw "Node.js 18+ is required. Install from https://nodejs.org"
}
Write-Host ("Node version: " + (node -v)) -ForegroundColor Gray
$pkg = Join-Path $PSScriptRoot "package.json"
$StopOnFail = $true
if (Test-Path $pkg) {
  try {
     # FIXED: stray "=" removed (original: = Get-Content  -Raw | ConvertFrom-Json)
    if (.dependencies -and .dependencies.yaml) {  = False }
  } catch {  = True }
}

if (-not (Test-Path )) {
  Write-Host "Bootstrapping package.json..." -ForegroundColor Yellow
  Push-Location C:\Users\gregc\vi-clean\scripts\fix
  npm init -y | Out-Null
  npm pkg set type="module" | Out-Null
  Pop-Location
}

if ( -or -not (Test-Path (Join-Path C:\Users\gregc\vi-clean\scripts\fix "node_modules\yaml\package.json"))) {
  Write-Host "Installing yaml runtime dep..." -ForegroundColor Yellow
  Push-Location C:\Users\gregc\vi-clean\scripts\fix
  npm i yaml@2.5.1 | Out-Null
  Pop-Location
}
# Build command
$node = "node"
$dry  = if ($DryRun) { "--dry" } else { "" }
$agentJs = Join-Path $PSScriptRoot "agent.mjs"
if (!(Test-Path $agentJs)) { throw "agent.mjs not found at $agentJs" }

# Transcript
$runDir = Join-Path $ProjectDir "agent_runs"
New-Item -ItemType Directory -Force -Path $runDir | Out-Null
$ts = Get-Date -Format "yyyyMMdd_HHmmss"
$transcriptPath = Join-Path $runDir "transcript_$ts.txt"
Start-Transcript -Path $transcriptPath -Force | Out-Null

# Exact command
$argList = @($agentJs, "--sprint", $SprintPath)
if ($BacklogPath) { $argList += @("--backlog", $BacklogPath) }
$argList += @("--config", $ConfigPath)
if ($dry -ne "") { $argList += $dry }
Write-Host ("CMD: node " + ($argList -join ' ')) -ForegroundColor Cyan

# Run and capture exit code
& $node @argList
$code = $LASTEXITCODE
Stop-Transcript | Out-Null

if ($code -ne 0) {
  Write-Host ("Agent FAILED with exit code " + $code) -ForegroundColor Red
  Write-Host ("See transcript: " + $transcriptPath) -ForegroundColor Yellow
  exit $code
}

Write-Host "Agent COMPLETED (exit 0)" -ForegroundColor Green
Write-Host ("Transcript at: " + $transcriptPath) -ForegroundColor Gray





